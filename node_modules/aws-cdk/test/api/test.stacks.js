"use strict";
const cxapi = require("@aws-cdk/cx-api");
const lib_1 = require("../../lib");
const stacks_1 = require("../../lib/api/cxapp/stacks");
const settings_1 = require("../../lib/settings");
const util_1 = require("../util");
const FIXED_RESULT = util_1.testAssembly({
    stackName: 'withouterrors',
    template: { resource: 'noerrorresource' },
}, {
    stackName: 'witherrors',
    template: { resource: 'errorresource' },
    metadata: {
        '/resource': [
            {
                type: cxapi.ERROR_METADATA_KEY,
                data: 'this is an error'
            }
        ]
    },
});
function testStacks() {
    return new stacks_1.AppStacks({
        configuration: new settings_1.Configuration(),
        aws: new lib_1.SDK(),
        synthesizer: async () => FIXED_RESULT,
    });
}
module.exports = {
    async 'do not throw when selecting stack without errors'(test) {
        // GIVEN
        const stacks = testStacks();
        // WHEN
        const selected = await stacks.selectStacks(['withouterrors'], {
            defaultBehavior: stacks_1.DefaultSelection.AllStacks
        });
        // THEN
        test.equal(selected[0].template.resource, 'noerrorresource');
        test.done();
    },
    async 'do throw when selecting stack with errors'(test) {
        // GIVEN
        const stacks = testStacks();
        // WHEN
        try {
            await stacks.selectStacks(['witherrors'], {
                defaultBehavior: stacks_1.DefaultSelection.AllStacks
            });
            test.ok(false, 'Did not get exception');
        }
        catch (e) {
            test.ok(/Found errors/.test(e.toString()), 'Wrong error');
        }
        test.done();
    },
    async 'select behavior: all'(test) {
        // GIVEN
        const stacks = testStacks();
        // WHEN
        const x = await stacks.selectStacks([], { defaultBehavior: stacks_1.DefaultSelection.AllStacks });
        // THEN
        test.deepEqual(x.length, 2);
        test.done();
    },
    async 'select behavior: none'(test) {
        // GIVEN
        const stacks = testStacks();
        // WHEN
        const x = await stacks.selectStacks([], { defaultBehavior: stacks_1.DefaultSelection.None });
        // THEN
        test.deepEqual(x.length, 0);
        test.done();
    },
    async 'select behavior: single'(test) {
        // GIVEN
        const stacks = testStacks();
        // WHEN
        let thrown;
        try {
            await stacks.selectStacks([], { defaultBehavior: stacks_1.DefaultSelection.OnlySingle });
        }
        catch (e) {
            thrown = e.message;
        }
        // THEN
        test.ok(thrown && thrown.includes('Since this app includes more than a single stack, specify which stacks to use (wildcards are supported)'));
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5zdGFja3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXN0LnN0YWNrcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEseUNBQTBDO0FBRTFDLG1DQUFnQztBQUNoQyx1REFBeUU7QUFDekUsaURBQW1EO0FBQ25ELGtDQUF1QztBQUV2QyxNQUFNLFlBQVksR0FBRyxtQkFBWSxDQUFDO0lBQ2hDLFNBQVMsRUFBRSxlQUFlO0lBQzFCLFFBQVEsRUFBRSxFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBRTtDQUMxQyxFQUNEO0lBQ0UsU0FBUyxFQUFFLFlBQVk7SUFDdkIsUUFBUSxFQUFFLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRTtJQUN2QyxRQUFRLEVBQUU7UUFDUixXQUFXLEVBQUU7WUFDWDtnQkFDRSxJQUFJLEVBQUUsS0FBSyxDQUFDLGtCQUFrQjtnQkFDOUIsSUFBSSxFQUFFLGtCQUFrQjthQUN6QjtTQUNGO0tBQ0Y7Q0FDRixDQUFDLENBQUM7QUErRUgsU0FBUyxVQUFVO0lBQ2pCLE9BQU8sSUFBSSxrQkFBUyxDQUFDO1FBQ25CLGFBQWEsRUFBRSxJQUFJLHdCQUFhLEVBQUU7UUFDbEMsR0FBRyxFQUFFLElBQUksU0FBRyxFQUFFO1FBQ2QsV0FBVyxFQUFFLEtBQUssSUFBSSxFQUFFLENBQUMsWUFBWTtLQUN0QyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBbkZELGlCQUFTO0lBQ1AsS0FBSyxDQUFDLGtEQUFrRCxDQUFDLElBQVU7UUFDakUsUUFBUTtRQUNSLE1BQU0sTUFBTSxHQUFHLFVBQVUsRUFBRSxDQUFDO1FBRTVCLE9BQU87UUFDUCxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxlQUFlLENBQUMsRUFBRTtZQUM1RCxlQUFlLEVBQUUseUJBQWdCLENBQUMsU0FBUztTQUM1QyxDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBRTdELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCxLQUFLLENBQUMsMkNBQTJDLENBQUMsSUFBVTtRQUMxRCxRQUFRO1FBQ1IsTUFBTSxNQUFNLEdBQUcsVUFBVSxFQUFFLENBQUM7UUFFNUIsT0FBTztRQUNQLElBQUk7WUFDRixNQUFNLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxZQUFZLENBQUMsRUFBRTtnQkFDeEMsZUFBZSxFQUFFLHlCQUFnQixDQUFDLFNBQVM7YUFDNUMsQ0FBQyxDQUFDO1lBRUgsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztTQUN6QztRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsSUFBSSxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1NBQzNEO1FBRUQsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxJQUFVO1FBQ3JDLFFBQVE7UUFDUixNQUFNLE1BQU0sR0FBRyxVQUFVLEVBQUUsQ0FBQztRQUU1QixPQUFPO1FBQ1AsTUFBTSxDQUFDLEdBQUcsTUFBTSxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxFQUFFLGVBQWUsRUFBRSx5QkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBRXpGLE9BQU87UUFDUCxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxJQUFVO1FBQ3RDLFFBQVE7UUFDUixNQUFNLE1BQU0sR0FBRyxVQUFVLEVBQUUsQ0FBQztRQUU1QixPQUFPO1FBQ1AsTUFBTSxDQUFDLEdBQUcsTUFBTSxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxFQUFFLGVBQWUsRUFBRSx5QkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRXBGLE9BQU87UUFDUCxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxJQUFVO1FBQ3hDLFFBQVE7UUFDUixNQUFNLE1BQU0sR0FBRyxVQUFVLEVBQUUsQ0FBQztRQUU1QixPQUFPO1FBQ1AsSUFBSSxNQUEwQixDQUFDO1FBQy9CLElBQUk7WUFDRixNQUFNLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLEVBQUUsZUFBZSxFQUFFLHlCQUFnQixDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7U0FDakY7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLE1BQU0sR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDO1NBQ3BCO1FBRUQsT0FBTztRQUNQLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMseUdBQXlHLENBQUMsQ0FBQyxDQUFDO1FBQzlJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7Q0FFRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGN4YXBpID0gcmVxdWlyZSgnQGF3cy1jZGsvY3gtYXBpJyk7XG5pbXBvcnQgeyBUZXN0IH0gZnJvbSAnbm9kZXVuaXQnO1xuaW1wb3J0IHsgU0RLIH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCB7IEFwcFN0YWNrcywgRGVmYXVsdFNlbGVjdGlvbiB9IGZyb20gJy4uLy4uL2xpYi9hcGkvY3hhcHAvc3RhY2tzJztcbmltcG9ydCB7IENvbmZpZ3VyYXRpb24gfSBmcm9tICcuLi8uLi9saWIvc2V0dGluZ3MnO1xuaW1wb3J0IHsgdGVzdEFzc2VtYmx5IH0gZnJvbSAnLi4vdXRpbCc7XG5cbmNvbnN0IEZJWEVEX1JFU1VMVCA9IHRlc3RBc3NlbWJseSh7XG4gIHN0YWNrTmFtZTogJ3dpdGhvdXRlcnJvcnMnLFxuICB0ZW1wbGF0ZTogeyByZXNvdXJjZTogJ25vZXJyb3JyZXNvdXJjZScgfSxcbn0sXG57XG4gIHN0YWNrTmFtZTogJ3dpdGhlcnJvcnMnLFxuICB0ZW1wbGF0ZTogeyByZXNvdXJjZTogJ2Vycm9ycmVzb3VyY2UnIH0sXG4gIG1ldGFkYXRhOiB7XG4gICAgJy9yZXNvdXJjZSc6IFtcbiAgICAgIHtcbiAgICAgICAgdHlwZTogY3hhcGkuRVJST1JfTUVUQURBVEFfS0VZLFxuICAgICAgICBkYXRhOiAndGhpcyBpcyBhbiBlcnJvcidcbiAgICAgIH1cbiAgICBdXG4gIH0sXG59KTtcblxuZXhwb3J0ID0ge1xuICBhc3luYyAnZG8gbm90IHRocm93IHdoZW4gc2VsZWN0aW5nIHN0YWNrIHdpdGhvdXQgZXJyb3JzJyh0ZXN0OiBUZXN0KSB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFja3MgPSB0ZXN0U3RhY2tzKCk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3Qgc2VsZWN0ZWQgPSBhd2FpdCBzdGFja3Muc2VsZWN0U3RhY2tzKFsnd2l0aG91dGVycm9ycyddLCB7XG4gICAgICBkZWZhdWx0QmVoYXZpb3I6IERlZmF1bHRTZWxlY3Rpb24uQWxsU3RhY2tzXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgdGVzdC5lcXVhbChzZWxlY3RlZFswXS50ZW1wbGF0ZS5yZXNvdXJjZSwgJ25vZXJyb3JyZXNvdXJjZScpO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgYXN5bmMgJ2RvIHRocm93IHdoZW4gc2VsZWN0aW5nIHN0YWNrIHdpdGggZXJyb3JzJyh0ZXN0OiBUZXN0KSB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFja3MgPSB0ZXN0U3RhY2tzKCk7XG5cbiAgICAvLyBXSEVOXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHN0YWNrcy5zZWxlY3RTdGFja3MoWyd3aXRoZXJyb3JzJ10sIHtcbiAgICAgICAgZGVmYXVsdEJlaGF2aW9yOiBEZWZhdWx0U2VsZWN0aW9uLkFsbFN0YWNrc1xuICAgICAgfSk7XG5cbiAgICAgIHRlc3Qub2soZmFsc2UsICdEaWQgbm90IGdldCBleGNlcHRpb24nKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0ZXN0Lm9rKC9Gb3VuZCBlcnJvcnMvLnRlc3QoZS50b1N0cmluZygpKSwgJ1dyb25nIGVycm9yJyk7XG4gICAgfVxuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgYXN5bmMgJ3NlbGVjdCBiZWhhdmlvcjogYWxsJyh0ZXN0OiBUZXN0KSB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFja3MgPSB0ZXN0U3RhY2tzKCk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3QgeCA9IGF3YWl0IHN0YWNrcy5zZWxlY3RTdGFja3MoW10sIHsgZGVmYXVsdEJlaGF2aW9yOiBEZWZhdWx0U2VsZWN0aW9uLkFsbFN0YWNrcyB9KTtcblxuICAgIC8vIFRIRU5cbiAgICB0ZXN0LmRlZXBFcXVhbCh4Lmxlbmd0aCwgMik7XG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgYXN5bmMgJ3NlbGVjdCBiZWhhdmlvcjogbm9uZScodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2tzID0gdGVzdFN0YWNrcygpO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IHggPSBhd2FpdCBzdGFja3Muc2VsZWN0U3RhY2tzKFtdLCB7IGRlZmF1bHRCZWhhdmlvcjogRGVmYXVsdFNlbGVjdGlvbi5Ob25lIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIHRlc3QuZGVlcEVxdWFsKHgubGVuZ3RoLCAwKTtcbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICBhc3luYyAnc2VsZWN0IGJlaGF2aW9yOiBzaW5nbGUnKHRlc3Q6IFRlc3QpIHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrcyA9IHRlc3RTdGFja3MoKTtcblxuICAgIC8vIFdIRU5cbiAgICBsZXQgdGhyb3duOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHN0YWNrcy5zZWxlY3RTdGFja3MoW10sIHsgZGVmYXVsdEJlaGF2aW9yOiBEZWZhdWx0U2VsZWN0aW9uLk9ubHlTaW5nbGUgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3duID0gZS5tZXNzYWdlO1xuICAgIH1cblxuICAgIC8vIFRIRU5cbiAgICB0ZXN0Lm9rKHRocm93biAmJiB0aHJvd24uaW5jbHVkZXMoJ1NpbmNlIHRoaXMgYXBwIGluY2x1ZGVzIG1vcmUgdGhhbiBhIHNpbmdsZSBzdGFjaywgc3BlY2lmeSB3aGljaCBzdGFja3MgdG8gdXNlICh3aWxkY2FyZHMgYXJlIHN1cHBvcnRlZCknKSk7XG4gICAgdGVzdC5kb25lKCk7XG4gIH1cblxufTtcblxuZnVuY3Rpb24gdGVzdFN0YWNrcygpIHtcbiAgcmV0dXJuIG5ldyBBcHBTdGFja3Moe1xuICAgIGNvbmZpZ3VyYXRpb246IG5ldyBDb25maWd1cmF0aW9uKCksXG4gICAgYXdzOiBuZXcgU0RLKCksXG4gICAgc3ludGhlc2l6ZXI6IGFzeW5jICgpID0+IEZJWEVEX1JFU1VMVCxcbiAgfSk7XG59Il19