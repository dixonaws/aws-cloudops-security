"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const colors = require("colors/safe");
const archive_1 = require("../archive");
const logging_1 = require("../logging");
const credentials_1 = require("./aws-auth/credentials");
const bootstrap_environment_1 = require("./bootstrap-environment");
const cloudformation_1 = require("./util/cloudformation");
class ToolkitInfo {
    constructor(props) {
        this.props = props;
        /**
         * A cache of previous uploads done in this session
         */
        this.previousUploads = {};
        this.sdk = props.sdk;
    }
    get bucketUrl() {
        return `https://${this.props.bucketEndpoint}`;
    }
    get bucketName() {
        return this.props.bucketName;
    }
    /**
     * Uploads a data blob to S3 under the specified key prefix.
     * Uses a hash to render the full key and skips upload if an object
     * already exists by this key.
     */
    async uploadIfChanged(data, props) {
        const s3 = await this.props.sdk.s3(this.props.environment.account, this.props.environment.region, credentials_1.Mode.ForWriting);
        const s3KeyPrefix = props.s3KeyPrefix || '';
        const s3KeySuffix = props.s3KeySuffix || '';
        const bucket = this.props.bucketName;
        const hash = archive_1.contentHash(data);
        const filename = `${hash}${s3KeySuffix}`;
        const key = `${s3KeyPrefix}${filename}`;
        const url = `s3://${bucket}/${key}`;
        logging_1.debug(`${url}: checking if already exists`);
        if (await objectExists(s3, bucket, key)) {
            logging_1.debug(`${url}: found (skipping upload)`);
            return { filename, key, hash, changed: false };
        }
        const uploaded = { filename, key, hash, changed: true };
        // Upload if it's new or server-side copy if it was already uploaded previously
        const previous = this.previousUploads[hash];
        if (previous) {
            logging_1.debug(`${url}: copying`);
            await s3.copyObject({
                Bucket: bucket,
                Key: key,
                CopySource: `${bucket}/${previous.key}`
            }).promise();
            logging_1.debug(`${url}: copy complete`);
        }
        else {
            logging_1.debug(`${url}: uploading`);
            await s3.putObject({
                Bucket: bucket,
                Key: key,
                Body: data,
                ContentType: props.contentType
            }).promise();
            logging_1.debug(`${url}: upload complete`);
            this.previousUploads[hash] = uploaded;
        }
        return uploaded;
    }
    /**
     * Prepare an ECR repository for uploading to using Docker
     */
    async prepareEcrRepository(asset) {
        const ecr = await this.props.sdk.ecr(this.props.environment.account, this.props.environment.region, credentials_1.Mode.ForWriting);
        let repositoryName;
        if (asset.repositoryName) {
            // Repository name provided by user
            repositoryName = asset.repositoryName;
        }
        else {
            // Repository name based on asset id
            const assetId = asset.id;
            repositoryName = 'cdk/' + assetId.replace(/[:/]/g, '-').toLowerCase();
        }
        let repository;
        try {
            logging_1.debug(`${repositoryName}: checking for repository.`);
            const describeResponse = await ecr.describeRepositories({ repositoryNames: [repositoryName] }).promise();
            repository = describeResponse.repositories[0];
        }
        catch (e) {
            if (e.code !== 'RepositoryNotFoundException') {
                throw e;
            }
        }
        if (repository) {
            return {
                repositoryUri: repository.repositoryUri,
                repositoryName
            };
        }
        logging_1.debug(`${repositoryName}: creating`);
        const response = await ecr.createRepository({ repositoryName }).promise();
        repository = response.repository;
        // Better put a lifecycle policy on this so as to not cost too much money
        await ecr.putLifecyclePolicy({
            repositoryName,
            lifecyclePolicyText: JSON.stringify(DEFAULT_REPO_LIFECYCLE)
        }).promise();
        return {
            repositoryUri: repository.repositoryUri,
            repositoryName
        };
    }
    /**
     * Get ECR credentials
     */
    async getEcrCredentials() {
        const ecr = await this.props.sdk.ecr(this.props.environment.account, this.props.environment.region, credentials_1.Mode.ForReading);
        logging_1.debug(`Fetching ECR authorization token`);
        const authData = (await ecr.getAuthorizationToken({}).promise()).authorizationData || [];
        if (authData.length === 0) {
            throw new Error('No authorization data received from ECR');
        }
        const token = Buffer.from(authData[0].authorizationToken, 'base64').toString('ascii');
        const [username, password] = token.split(':');
        return {
            username,
            password,
            endpoint: authData[0].proxyEndpoint,
        };
    }
    /**
     * Check if image already exists in ECR repository
     */
    async checkEcrImage(repositoryName, imageTag) {
        const ecr = await this.props.sdk.ecr(this.props.environment.account, this.props.environment.region, credentials_1.Mode.ForReading);
        try {
            logging_1.debug(`${repositoryName}: checking for image ${imageTag}`);
            await ecr.describeImages({ repositoryName, imageIds: [{ imageTag }] }).promise();
            // If we got here, the image already exists. Nothing else needs to be done.
            return true;
        }
        catch (e) {
            if (e.code !== 'ImageNotFoundException') {
                throw e;
            }
        }
        return false;
    }
}
exports.ToolkitInfo = ToolkitInfo;
async function objectExists(s3, bucket, key) {
    try {
        await s3.headObject({ Bucket: bucket, Key: key }).promise();
        return true;
    }
    catch (e) {
        if (e.code === 'NotFound') {
            return false;
        }
        throw e;
    }
}
async function loadToolkitInfo(environment, sdk, stackName) {
    const cfn = await sdk.cloudFormation(environment.account, environment.region, credentials_1.Mode.ForReading);
    const stack = await cloudformation_1.waitForStack(cfn, stackName);
    if (!stack) {
        logging_1.debug('The environment %s doesn\'t have the CDK toolkit stack (%s) installed. Use %s to setup your environment for use with the toolkit.', environment.name, stackName, colors.blue(`cdk bootstrap "${environment.name}"`));
        return undefined;
    }
    return new ToolkitInfo({
        sdk, environment,
        bucketName: getOutputValue(stack, bootstrap_environment_1.BUCKET_NAME_OUTPUT),
        bucketEndpoint: getOutputValue(stack, bootstrap_environment_1.BUCKET_DOMAIN_NAME_OUTPUT)
    });
}
exports.loadToolkitInfo = loadToolkitInfo;
function getOutputValue(stack, output) {
    let result;
    if (stack.Outputs) {
        const found = stack.Outputs.find(o => o.OutputKey === output);
        result = found && found.OutputValue;
    }
    if (result === undefined) {
        throw new Error(`The CDK toolkit stack (${stack.StackName}) does not have an output named ${output}. Use 'cdk bootstrap' to correct this.`);
    }
    return result;
}
const DEFAULT_REPO_LIFECYCLE = {
    rules: [
        {
            rulePriority: 100,
            description: 'Retain only 5 images',
            selection: {
                tagStatus: 'any',
                countType: 'imageCountMoreThan',
                countNumber: 5,
            },
            action: { type: 'expire' }
        }
    ]
};
//# sourceMappingURL=data:application/json;base64,