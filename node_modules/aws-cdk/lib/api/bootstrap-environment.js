"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs-extra");
const os = require("os");
const path = require("path");
const deploy_stack_1 = require("./deploy-stack");
// tslint:disable:max-line-length
exports.BUCKET_NAME_OUTPUT = 'BucketName';
exports.BUCKET_DOMAIN_NAME_OUTPUT = 'BucketDomainName';
async function bootstrapEnvironment(environment, aws, toolkitStackName, roleArn, toolkitBucketName) {
    const template = {
        Description: "The CDK Toolkit Stack. It was created by `cdk bootstrap` and manages resources necessary for managing your Cloud Applications with AWS CDK.",
        Resources: {
            StagingBucket: {
                Type: "AWS::S3::Bucket",
                Properties: {
                    BucketName: toolkitBucketName,
                    AccessControl: "Private",
                    BucketEncryption: { ServerSideEncryptionConfiguration: [{ ServerSideEncryptionByDefault: { SSEAlgorithm: "aws:kms" } }] }
                }
            }
        },
        Outputs: {
            [exports.BUCKET_NAME_OUTPUT]: {
                Description: "The name of the S3 bucket owned by the CDK toolkit stack",
                Value: { Ref: "StagingBucket" }
            },
            [exports.BUCKET_DOMAIN_NAME_OUTPUT]: {
                Description: "The domain name of the S3 bucket owned by the CDK toolkit stack",
                Value: { "Fn::GetAtt": ["StagingBucket", "DomainName"] }
            }
        }
    };
    const outdir = await fs.mkdtemp(path.join(os.tmpdir(), 'cdk-bootstrap'));
    const builder = new cxapi.CloudAssemblyBuilder(outdir);
    const templateFile = `${toolkitStackName}.template.json`;
    await fs.writeJson(path.join(builder.outdir, templateFile), template, { spaces: 2 });
    builder.addArtifact(toolkitStackName, {
        type: cxapi.ArtifactType.AWS_CLOUDFORMATION_STACK,
        environment: cxapi.EnvironmentUtils.format(environment.account, environment.region),
        properties: {
            templateFile
        },
    });
    const assembly = builder.build();
    return await deploy_stack_1.deployStack({ stack: assembly.getStack(toolkitStackName), sdk: aws, roleArn });
}
exports.bootstrapEnvironment = bootstrapEnvironment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwLWVudmlyb25tZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYm9vdHN0cmFwLWVudmlyb25tZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUNBQTBDO0FBQzFDLCtCQUFnQztBQUNoQyx5QkFBMEI7QUFDMUIsNkJBQThCO0FBQzlCLGlEQUFnRTtBQUdoRSxpQ0FBaUM7QUFFcEIsUUFBQSxrQkFBa0IsR0FBRyxZQUFZLENBQUM7QUFDbEMsUUFBQSx5QkFBeUIsR0FBRyxrQkFBa0IsQ0FBQztBQUVyRCxLQUFLLFVBQVUsb0JBQW9CLENBQUMsV0FBOEIsRUFBRSxHQUFRLEVBQUUsZ0JBQXdCLEVBQUUsT0FBMkIsRUFBRSxpQkFBcUM7SUFFL0ssTUFBTSxRQUFRLEdBQUc7UUFDZixXQUFXLEVBQUUsNklBQTZJO1FBQzFKLFNBQVMsRUFBRTtZQUNULGFBQWEsRUFBRTtnQkFDYixJQUFJLEVBQUUsaUJBQWlCO2dCQUN2QixVQUFVLEVBQUU7b0JBQ1YsVUFBVSxFQUFFLGlCQUFpQjtvQkFDN0IsYUFBYSxFQUFFLFNBQVM7b0JBQ3hCLGdCQUFnQixFQUFFLEVBQUUsaUNBQWlDLEVBQUUsQ0FBQyxFQUFFLDZCQUE2QixFQUFFLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsRUFBRTtpQkFDMUg7YUFDRjtTQUNGO1FBQ0QsT0FBTyxFQUFFO1lBQ1AsQ0FBQywwQkFBa0IsQ0FBQyxFQUFFO2dCQUNwQixXQUFXLEVBQUUsMERBQTBEO2dCQUN2RSxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsZUFBZSxFQUFFO2FBQ2hDO1lBQ0QsQ0FBQyxpQ0FBeUIsQ0FBQyxFQUFFO2dCQUMzQixXQUFXLEVBQUUsaUVBQWlFO2dCQUM5RSxLQUFLLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxlQUFlLEVBQUUsWUFBWSxDQUFDLEVBQUU7YUFDekQ7U0FDRjtLQUNGLENBQUM7SUFFRixNQUFNLE1BQU0sR0FBRyxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztJQUN6RSxNQUFNLE9BQU8sR0FBRyxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN2RCxNQUFNLFlBQVksR0FBRyxHQUFHLGdCQUFnQixnQkFBZ0IsQ0FBQztJQUV6RCxNQUFNLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRXJGLE9BQU8sQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUU7UUFDcEMsSUFBSSxFQUFFLEtBQUssQ0FBQyxZQUFZLENBQUMsd0JBQXdCO1FBQ2pELFdBQVcsRUFBRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUNuRixVQUFVLEVBQUU7WUFDVixZQUFZO1NBQ2I7S0FDRixDQUFDLENBQUM7SUFFSCxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDakMsT0FBTyxNQUFNLDBCQUFXLENBQUMsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5RixDQUFDO0FBMUNELG9EQTBDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjeGFwaSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2N4LWFwaScpO1xuaW1wb3J0IGZzID0gcmVxdWlyZSgnZnMtZXh0cmEnKTtcbmltcG9ydCBvcyA9IHJlcXVpcmUoJ29zJyk7XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmltcG9ydCB7IGRlcGxveVN0YWNrLCBEZXBsb3lTdGFja1Jlc3VsdCB9IGZyb20gJy4vZGVwbG95LXN0YWNrJztcbmltcG9ydCB7IFNESyB9IGZyb20gJy4vdXRpbC9zZGsnO1xuXG4vLyB0c2xpbnQ6ZGlzYWJsZTptYXgtbGluZS1sZW5ndGhcblxuZXhwb3J0IGNvbnN0IEJVQ0tFVF9OQU1FX09VVFBVVCA9ICdCdWNrZXROYW1lJztcbmV4cG9ydCBjb25zdCBCVUNLRVRfRE9NQUlOX05BTUVfT1VUUFVUID0gJ0J1Y2tldERvbWFpbk5hbWUnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYm9vdHN0cmFwRW52aXJvbm1lbnQoZW52aXJvbm1lbnQ6IGN4YXBpLkVudmlyb25tZW50LCBhd3M6IFNESywgdG9vbGtpdFN0YWNrTmFtZTogc3RyaW5nLCByb2xlQXJuOiBzdHJpbmcgfCB1bmRlZmluZWQsIHRvb2xraXRCdWNrZXROYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQpOiBQcm9taXNlPERlcGxveVN0YWNrUmVzdWx0PiB7XG5cbiAgY29uc3QgdGVtcGxhdGUgPSB7XG4gICAgRGVzY3JpcHRpb246IFwiVGhlIENESyBUb29sa2l0IFN0YWNrLiBJdCB3YXMgY3JlYXRlZCBieSBgY2RrIGJvb3RzdHJhcGAgYW5kIG1hbmFnZXMgcmVzb3VyY2VzIG5lY2Vzc2FyeSBmb3IgbWFuYWdpbmcgeW91ciBDbG91ZCBBcHBsaWNhdGlvbnMgd2l0aCBBV1MgQ0RLLlwiLFxuICAgIFJlc291cmNlczoge1xuICAgICAgU3RhZ2luZ0J1Y2tldDoge1xuICAgICAgICBUeXBlOiBcIkFXUzo6UzM6OkJ1Y2tldFwiLFxuICAgICAgICBQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgQnVja2V0TmFtZTogdG9vbGtpdEJ1Y2tldE5hbWUsXG4gICAgICAgICAgQWNjZXNzQ29udHJvbDogXCJQcml2YXRlXCIsXG4gICAgICAgICAgQnVja2V0RW5jcnlwdGlvbjogeyBTZXJ2ZXJTaWRlRW5jcnlwdGlvbkNvbmZpZ3VyYXRpb246IFt7IFNlcnZlclNpZGVFbmNyeXB0aW9uQnlEZWZhdWx0OiB7IFNTRUFsZ29yaXRobTogXCJhd3M6a21zXCIgfSB9XSB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIE91dHB1dHM6IHtcbiAgICAgIFtCVUNLRVRfTkFNRV9PVVRQVVRdOiB7XG4gICAgICAgIERlc2NyaXB0aW9uOiBcIlRoZSBuYW1lIG9mIHRoZSBTMyBidWNrZXQgb3duZWQgYnkgdGhlIENESyB0b29sa2l0IHN0YWNrXCIsXG4gICAgICAgIFZhbHVlOiB7IFJlZjogXCJTdGFnaW5nQnVja2V0XCIgfVxuICAgICAgfSxcbiAgICAgIFtCVUNLRVRfRE9NQUlOX05BTUVfT1VUUFVUXToge1xuICAgICAgICBEZXNjcmlwdGlvbjogXCJUaGUgZG9tYWluIG5hbWUgb2YgdGhlIFMzIGJ1Y2tldCBvd25lZCBieSB0aGUgQ0RLIHRvb2xraXQgc3RhY2tcIixcbiAgICAgICAgVmFsdWU6IHsgXCJGbjo6R2V0QXR0XCI6IFtcIlN0YWdpbmdCdWNrZXRcIiwgXCJEb21haW5OYW1lXCJdIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgb3V0ZGlyID0gYXdhaXQgZnMubWtkdGVtcChwYXRoLmpvaW4ob3MudG1wZGlyKCksICdjZGstYm9vdHN0cmFwJykpO1xuICBjb25zdCBidWlsZGVyID0gbmV3IGN4YXBpLkNsb3VkQXNzZW1ibHlCdWlsZGVyKG91dGRpcik7XG4gIGNvbnN0IHRlbXBsYXRlRmlsZSA9IGAke3Rvb2xraXRTdGFja05hbWV9LnRlbXBsYXRlLmpzb25gO1xuXG4gIGF3YWl0IGZzLndyaXRlSnNvbihwYXRoLmpvaW4oYnVpbGRlci5vdXRkaXIsIHRlbXBsYXRlRmlsZSksIHRlbXBsYXRlLCB7IHNwYWNlczogMiB9KTtcblxuICBidWlsZGVyLmFkZEFydGlmYWN0KHRvb2xraXRTdGFja05hbWUsIHtcbiAgICB0eXBlOiBjeGFwaS5BcnRpZmFjdFR5cGUuQVdTX0NMT1VERk9STUFUSU9OX1NUQUNLLFxuICAgIGVudmlyb25tZW50OiBjeGFwaS5FbnZpcm9ubWVudFV0aWxzLmZvcm1hdChlbnZpcm9ubWVudC5hY2NvdW50LCBlbnZpcm9ubWVudC5yZWdpb24pLFxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIHRlbXBsYXRlRmlsZVxuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IGFzc2VtYmx5ID0gYnVpbGRlci5idWlsZCgpO1xuICByZXR1cm4gYXdhaXQgZGVwbG95U3RhY2soeyBzdGFjazogYXNzZW1ibHkuZ2V0U3RhY2sodG9vbGtpdFN0YWNrTmFtZSksIHNkazogYXdzLCByb2xlQXJuIH0pO1xufVxuIl19